<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="content-type" content="text/html; charset=gbk">

<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7">
<title> 图像缩放算法_lantianyu520-ChinaUnix博客</title>
<meta name="description" content="摘要:首先给出一个基本的图像缩放算法，然后一步一步的优化其速度和缩放质量；高质量的快速的图像缩放 全文 分为: 上篇 近邻取样插值和其速度优化 中篇 二次线性插值和三次卷积插值 下篇 三次线性插值和MipMap链 正文：  为了便于讨论，这里只处理32bit的ARGB"><script src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/ga.js" async="" type="text/javascript"></script><script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_cookie.js"></script>
<script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_common.js"></script>
<script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_menu.js"></script>
<script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_ajax.js"></script>
<script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_face.js"></script>
<script language="javascript" type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/script_manage.js"></script>
<link rel="StyleSheet" href="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/style.css" type="text/css" media="screen">
 
<link rel="StyleSheet" href="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/default.css" type="text/css" media="screen">
</head>
<body><script charset="utf-8" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/jiathis.php"></script><link type="text/css" rel="stylesheet" href="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/jiathis_share.css"><iframe style="position: fixed; display: none; opacity: 0;" frameborder="0"></iframe><div style="position: absolute; z-index: 1000000000; display: none; top: 50%; left: 50%; overflow: auto;" class="jiathis_style"></div><div style="position: absolute; z-index: 1000000000; display: none; overflow: auto;" class="jiathis_style"></div><iframe src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/jiathis_utility.htm" style="display: none;" frameborder="0"></iframe>

<style type="text/css">
@import url(http://blog.chinaunix.net/css/nav.css);
</style>

<div class="login">
<div class="Content">
<div class="l1" id="ll">

<a href="http://www.chinaunix.net/" target="_blank">CU首页</a>
<a href="http://blog.chinaunix.net/link.php?url=http://bbs.chinaunix.net" title="CU论坛" target="_blank">CU论坛首页</a>
<a href="http://blog.chinaunix.net/link.php?url=http://blog.chinaunix.net" title="CU博客" target="_blank">CU博客首页</a>   ┊ 
<a href="http://blog.chinaunix.net/do.php?ac=wuxingzypcw213">登录</a>
<a href="http://blog.chinaunix.net/do.php?ac=8f442ba1e0c79cd3efcd1fd42b8aad8e">注册</a>
   ┊    
<a href="http://blog.chinaunix.net/network.php">随便看看</a>
</div>
<div class="r1">
<form action="/cp.php" method="get">
    <input name="ac" id="ac" value="search" type="hidden">
<input class="btn1" style="margin-bottom:0px;" value="" type="submit">
<select name="searchType" id="searchType" style="line-height: 13px;margin-bottom:0px;padding:0px;height:21px;">
<option selected="selected" value="blog">博文</option>
<option value="friend">博主</option>
<option value="album">相册</option>
<option value="poll">投票</option>
<option value="event">活动</option>
</select>
<input class="inp1" name="searchkey" id="searchkey" style="margin-bottom:0px;" type="text">
<a href="http://blog.chinaunix.net/cp.php?ac=blog" class="a1">发博文</a>
</form>
</div>
</div>
</div>

<ul id="ucappmenu_menu" class="dropmenu_drop" style="display:none;">
<li><a href="http://blog.chinaunix.net/link.php?url=http://bbs.chinaunix.net" title="CU论坛" target="_blank">CU论坛首页</a></li>
<li><a href="http://blog.chinaunix.net/link.php?url=http://blog.chinaunix.net" title="CU博客" target="_blank">CU博客首页</a></li>
</ul>


<div id="append_parent" style="z-index:99999;"></div>
<div id="ajaxwaitid"></div>
<span id="pageSet"></span>
<div class="Content" id="Content">
<div class="top" id="top" style=" position:relative;">
    <div class="tm"><a href="http://blog.chinaunix.net/link.php?url=http%3A%2F%2Fblog.chinaunix.net%2Fuid-24789255-id-3423021.html%26stats%3Dclick" target="_blank">公告：【2012年度评选】跨年原创博文评选开始啦！</a></div>
<div class="addr">
       			<b id="home_title">lantianyu520</b>
   	 <p>
<a href="http://blog.chinaunix.net/uid/22915173.html">lantianyu520.blog.chinaunix.net</a>
</p>
<span id="blog_brief">
<span id="blog_b"></span>&nbsp;&nbsp;&nbsp;
</span>
<div id="blog_brief_form" style="display:none; height:auto;">
 		<form id="brief_form" method="post" action="/do.php?ac=ajax&amp;op=blog_brief">
              			<input id="blog_brief" name="blog_brief" size="50" style="margin-bottom:0px;" type="text">
             			<input onclick="checkBbrief();" value="提交" class="submit" style="height:20px;margin-bottom:0px;" type="button">&nbsp;
            			<input name="formhash" value="bd614fc2" type="hidden">
              			<input value="取消" class="submit" style="height:20px;margin-bottom:0px;" onclick="s('blog_brief');h('blog_brief_form');" type="button">
             		 </form>
</div>
             
<!-- 徽章定位3 -->
</div>
<div class="daoh">
<a href="http://blog.chinaunix.net/uid/22915173.html">首页</a> | 
<a href="http://blog.chinaunix.net/uid/22915173/frmd/-1.html" class="here" ;="">博文目录</a>  |  
<a href="http://blog.chinaunix.net/space.php?do=album&amp;view=me&amp;uid=22915173">相册</a>  |  
<a href="http://blog.chinaunix.net/group.php" target="_blank">博客圈</a>  |
<a href="http://blog.chinaunix.net/space.php?do=profile&amp;uid=22915173">关于我</a>  |
<a href="http://blog.chinaunix.net/space.php?do=profile&amp;uid=22915173#comment">留言</a>
</div>
</div>
<link href="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/fck_editorarea.css" rel="stylesheet" type="text/css">
<div class="l2 ">	
<!-- 个人资料 -->
<div class="bor1 mt10" id="profile">
<div class="tit1">个人资料</div>
<div class="Img dingwei_img1"><a href="http://blog.chinaunix.net/uid/22915173.html"><img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/noavatar_big.gif" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_big.gif'"></a>
</div>
<div class="Text">
<div class="p1">
<a href="http://blog.chinaunix.net/uid/22915173.html">lantianyu520</a>
   		   		</div>
<div class="p3" style="height:38px;">
 <a href="http://blog.chinaunix.net/space.php?do=doing&amp;view=me&amp;uid=22915173" target="_blank">微博</a>
 <a href="http://bbs.chinaunix.net/" target="_blank">论坛</a>
</div>
<div class="p3"> 
 <a href="http://blog.chinaunix.net/cp.php?ac=pm&amp;uid=22915173" id="a_pm" onclick="ajaxmenu(event, this.id, 1)">发纸条</a> 
 <a href="http://blog.chinaunix.net/cp.php?ac=poke&amp;op=send&amp;uid=22915173" id="a_poke" onclick="ajaxmenu(event, this.id, 1)">打招呼</a>
 <span id="attention"><a href="javascript:;" onclick="attention(22915173 , 'add');">加关注</a></span>
   <a href="http://blog.chinaunix.net/cp.php?ac=friend&amp;op=add&amp;uid=22915173" id="a_friend_li" onclick="ajaxmenu(event, this.id, 1)">加好友</a>
 </div>

<div class="list1">
<ul>
<li>博客访问：91459</li>
<li>博文数量：247</li>
<li>博客积分：5262</li>
<li>博客等级：<a href="http://blog.chinaunix.net/cp.php?ac=credit&amp;op=usergroup">大校</a> </li>
<li>关注人气： 1</li>
<li>注册时间：2009-11-22 19:10:02</li>
</ul>
</div>
</div>
</div>

<!-- 文章分类 -->
<div class="bor1 mt10" id="blist">
<div class="tit1">文章分类</div>
<div class="allla">
<div class="alll"><a href="http://blog.chinaunix.net/uid/22915173/frmd/-1.html">全部博文<b>(247)</b></a></div>
<div class="alll"><a href="http://blog.chinaunix.net/uid/22915173/frmd/0.html">未分类博文(247)</a></div>
</div>
</div>
<script>
function opDIV(id){
if(document.getElementById('DIV_'+id).style.display=='none'){
document.getElementById('DIV_'+id).style.display='block';
document.getElementById(id).src="/image/list4.gif";
}else{
document.getElementById('DIV_'+id).style.display='none';
document.getElementById(id).src="/image/list41.gif";
}
}
</script>


<!-- 订阅我的博客 -->
<div class="bor1 mt10" id="rss">
<div class="tit1">订阅我的博客</div>
<ul class="list3">
<li><a href="http://blog.chinaunix.net/rss.php?uid=22915173"><img alt="订阅" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/feedsky.gif" height="16" width="49"></a></li>
<li><a target="_blank" href="http://www.xianguo.com/subscribe.php?url=http://home.chinaunix.com/rss.php?uid=22915173"><img alt="订阅到鲜果" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/d2.png" border="0"></a></li>
<li><a target="_blank" href="http://www.zhuaxia.com/add_channel.php?url=http://home.chinaunix.com/rss.php?uid=22915173"><img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/d3.png" alt="订阅到抓虾" border="0" height="16" width="103"></a></li>
<li><a target="_blank" href="http://fusion.google.com/add?feedurl=http://home.chinaunix.com/rss.php?uid=22915173"><img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/d4.png" alt="订阅到Google" border="0" height="16" width="103"></a></li>
</ul>
</div>


<!-- 好友 -->

<!-- 最近来访 -->
</div>
<div class="r2" id="blog_center" style="position:relative">
<!-- 博文 -->
<div class="bor1 mt10">
<div class="tit5"><span>字体大小：<a href="javascript:;" onclick="doZoom('16');" id="font_16">大</a> <a style="font-weight: bold;" href="javascript:;" onclick="doZoom('14');" id="font_14">中</a> <a href="javascript:;" onclick="doZoom('12');" id="font_12">小</a></span>博文</div>
<div class="text">
<div class="tit6">
<a href="javascript:;">图像缩放算法</a> 
(2011-08-15 11:23)
	
</div>
<div class="tit7">
</div>
<br>
<br>
<div id="detail" class="detail" style="line-height: 1.3;"><p><span style="font-family: 'courier new',courier; font-size: small">摘要:首先给出一个基本的图像缩放算法，然后一步一步的优化其速度和缩放质量；</span></p><p>高质量的快速的图像缩放 全文 分为:<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 上篇 近邻取样插值和其速度优化<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 中篇 二次线性插值和三次卷积插值<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 下篇 三次线性插值和MipMap链</p>
	<p>正文：&nbsp;&nbsp;</p>
	<p>&nbsp; 为了便于讨论，这里只处理32bit的ARGB颜色；<br>
	&nbsp; 代码使用C++;涉及到汇编优化的时候假定为x86平台;使用的编译器为vc2005;<br>
	&nbsp; 为了代码的可读性,没有加入异常处理代码;<br>
	&nbsp;&nbsp;测试使用的CPU为AMD64x2 4200+(2.37G)&nbsp; 和 Intel Core2 4400(2.00G);</p>
	<p><br>
	速度测试说明:<br>
	&nbsp; 只测试内存数据到内存数据的缩放<br>
	&nbsp; 测试图片都是800*600缩放到1024*768; fps表示每秒钟的帧数,值越大表示函数越快<br>
	<br>
	////////////////////////////////////////////////////////////////////////////////<br>
	//Windows GDI相关函数参考速度:<br>
	//==============================================================================<br>
	// 
BitBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;544.7
 fps&nbsp; //is copy 800*600 to 800*600<br>
	// 
BitBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;331.6
 fps&nbsp; //is copy 1024*1024 to 1024*1024<br>
	// StretchBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;232.7 fps&nbsp; //is zoom 800*600 to 1024*1024<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>A: 首先定义图像数据结构:&nbsp;</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 0);"><br>
			</span><span style="color: rgb(0, 0, 255);">#define</span><span style="color: rgb(0, 0, 0);">&nbsp;asm&nbsp;__asm<br>
			<br>
			typedef&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">char</span><span style="color: rgb(0, 0, 0);">&nbsp;TUInt8;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;[0..255]<br>
			</span><span style="color: rgb(0, 0, 255);">struct</span><span style="color: rgb(0, 0, 0);">&nbsp;TARGB32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//32&nbsp;bit&nbsp;color<br>
			</span><span style="color: rgb(0, 0, 0);">{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TUInt8&nbsp;&nbsp;B,G,R,A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;A&nbsp;is&nbsp;alpha<br>
			</span><span style="color: rgb(0, 0, 0);">};<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">struct</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//一块颜色数据区的描述，便于参数传递<br>
			</span><span style="color: rgb(0, 0, 0);">{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;&nbsp;&nbsp;&nbsp;pdata;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//颜色数据首地址<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_width;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//一行数据的物理宽度(字节宽度)；<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//abs(byte_width)
有可能大于等于width*sizeof(TARGB32);<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//像素宽度<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//像素高度<br>
			</span><span style="color: rgb(0, 0, 0);">};<br>
			<br>
			</span><span style="color: rgb(0, 128, 0);">//那么访问一个点的函数可以写为：<br>
			</span><span style="color: rgb(0, 0, 0);">inline&nbsp;TARGB32&amp;&nbsp;Pixels(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;(TARGB32*)((TUInt8*)pic.pdata+pic.byte_width*y)&nbsp;)[x];<br>
			}<br>
　</span></div>
	</div>
	<p>&nbsp;B: 缩放原理和公式图示:</p>
	<p>
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom_map.GIF" alt=""></p>
	<p>&nbsp;&nbsp;&nbsp; 缩放后图片&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;原图片<br>
	&nbsp;&nbsp; (宽DW,高DH)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (宽SW,高SH) </p>
	<p>&nbsp; (Sx-0)/(SW-0)=(Dx-0)/(DW-0)&nbsp;&nbsp; (Sy-0)/(SH-0)=(Dy-0)/(DH-0)<br>
	<span style="color: rgb(0, 0, 255);">&nbsp;=&gt;&nbsp;&nbsp; 
Sx=Dx*SW/DW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 
	Sy=Dy*SH/DH</span></p>
	<p>C: 缩放算法的一个参考实现</p>
	<p>//给出一个最简单的缩放函数(插值方式为近邻取样,而且我“尽力”把它写得慢一些了:D)<br>
	//Src.PColorData指向源数据区,Dst.PColorData指向目的数据区<br>
	//函数将大小为Src.Width*Src.Height的图片缩放到Dst.Width*Dst.Height的区域中</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom0(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;Dst.width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx=(x*Src.width/Dst.width);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=(y*Src.height/Dst.height);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pixels(Dst,x,y)=Pixels(Src,srcx,srcy);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;19.4 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p><br>
	D: 优化PicZoom0函数</p>
	<p>&nbsp;&nbsp; a.PicZoom0函数并没有按照颜色数据在内存中的排列顺序读写(内部循环递增y行<br>
	索引)，将造成CPU缓存预读失败和内存颠簸导致巨大的性能损失,(很多硬件都有这种特性,<br>
	包括缓存、内存、显存、硬盘等,优化顺序访问，随机访问时会造成巨大的性能损失)<br>
	所以先交换x,y循环的顺序:</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom1(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;Dst.width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx=(x*Src.width/Dst.width);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=(y*Src.height/Dst.height);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pixels(Dst,x,y)=Pixels(Src,srcx,srcy);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30.1 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>&nbsp; b.“(x*Src.Width/Dst.Width)”表达式中有一个除法运算，它属于很慢的操作(比一般<br>
	的加减运算慢几十倍!),使用定点数的方法来优化它；</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom2(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp; //函数能够处理的最大图片尺寸65536*65536<br>
			&nbsp;&nbsp;&nbsp; unsigned long xrIntFloat_16=(Src.width&lt;&lt;16)/Dst.width+1;&nbsp;<span style="color: rgb(0, 128, 0);">//16.16格式定点数</span><br>
			&nbsp;&nbsp;&nbsp; unsigned long yrIntFloat_16=(Src.height&lt;&lt;16)/Dst.height+1;&nbsp;<span style="color: rgb(0, 128, 0);">//16.16格式定点数</span></span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; //可证明: 
			(Dst.width-1)*xrIntFloat_16&lt;Src.width成立</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; for (unsigned long 
			y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (unsigned long x=0;x&lt;Dst.width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long srcx=(x*xrIntFloat_16)&gt;&gt;16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long srcy=(y*yrIntFloat_16)&gt;&gt;16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pixels(Dst,x,y)=Pixels(Src,srcx,srcy);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
			&nbsp;&nbsp;&nbsp; }</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;185.8 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>&nbsp; c.&nbsp; 在x的循环中y一直不变，那么可以提前计算与y相关的值; 
	1.可以发现srcy的值和x变量无关，可以提前到x轴循环之前；2.展开Pixels函数，优化与y相关的指针计算； </p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 0);">void PicZoom3(const TPicRegion&amp; 
			Dst,const TPicRegion&amp; Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp; unsigned long xrIntFloat_16=(Src.width&lt;&lt;16)/Dst.width+1; <br>
			&nbsp;&nbsp;&nbsp; unsigned long yrIntFloat_16=(Src.height&lt;&lt;16)/Dst.height+1;</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; unsigned long 
			dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp; TARGB32* pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp; unsigned long srcy_16=0;<br>
			&nbsp;&nbsp;&nbsp; for (unsigned long y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TARGB32* 
			pSrcLine=((TARGB32*)((TUInt8*)Src.pdata+Src.byte_width*(srcy_16&gt;&gt;16)));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long srcx_16=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (unsigned long x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDstLine[x]=pSrcLine[srcx_16&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp; }<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;414.4 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>&nbsp; d.定点数优化使函数能够处理的最大图片尺寸和缩放结果(肉眼不可察觉的误差)受到了一<br>
	定的影响,这里给出一个使用浮点运算的版本,可以在有这种需求的场合使用:</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom3_float(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//注意:&nbsp;该函数需要FPU支持<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp; double xrFloat=1.000000001/((double)Dst.width/Src.width);<br>
			&nbsp;&nbsp;&nbsp; double yrFloat=1.000000001/((double)Dst.height/Src.height);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">&nbsp;RC_Old;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">&nbsp;RC_Edit;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//设置FPU的取整方式&nbsp;&nbsp;为了直接使用fist浮点指令<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FNSTCW&nbsp;&nbsp;RC_Old&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;保存协处理器控制字,用来恢复<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FNSTCW&nbsp;&nbsp;RC_Edit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;保存协处理器控制字,用来修改<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FWAIT<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RC_Edit,&nbsp;0x0F00&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;改为&nbsp;RC=11&nbsp;&nbsp;使FPU向零取整&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FLDCW&nbsp;&nbsp;&nbsp;RC_Edit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;载入协处理器控制字,RC场已经修改<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">double</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pSrcLine=((TARGB32*)((TUInt8*)Src.pdata+Src.byte_width*((</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)srcy)));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">/**//*<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;srcx=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(unsigned&nbsp;long&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pDstLine[x]=pSrcLine[(unsigned&
nbsp;long)srcx];//因为默认的浮点取整是一个很慢<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//
的操作!&nbsp;所以才使用了直接操作FPU的内联汇编代码。<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx+=xrFloat;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}*/</span><span style="color: rgb(0, 0, 0);"><br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fld&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xrFloat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//st0==xrFloat<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fldz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//st0==0&nbsp;&nbsp;&nbsp;st1==xrFloat<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fist&nbsp;dword&nbsp;ptr&nbsp;srcx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx=(long)st0<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pDstLine[x]=pSrcLine[srcx];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fadd&nbsp;&nbsp;st,st(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//st0+=st1&nbsp;&nbsp;&nbsp;st1==xrFloat<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fstp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;fstp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy+=yrFloat;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//恢复FPU的取整方式<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FWAIT<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FLDCW&nbsp;&nbsp;&nbsp;RC_Old&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom3_float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;286.2 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p><br>
	&nbsp; e.注意到这样一个事实:每一行的缩放比例是固定的;那么可以预先建立一个缩放映射表格<br>
	&nbsp; 来处理缩放映射算法(PicZoom3_Table和PicZoom3_float的实现等价);</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom3_Table(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*&nbsp;SrcX_Table&nbsp;=&nbsp;</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">[dst_width];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)</span><span style="color: rgb(0, 128, 0);">//生成表&nbsp;SrcX_Table<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SrcX_Table[x]=(x*Src.width/Dst.width);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=(y*Src.height/Dst.height);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pSrcLine=((TARGB32*)((TUInt8*)Src.pdata+Src.byte_width*srcy));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pDstLine[x]=pSrcLine[SrcX_Table[x]];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;delete&nbsp;[]&nbsp;SrcX_Table;<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom3_Table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;390.1 fps<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>&nbsp; f.为了加快缩放，可以采用根据缩放比例动态生成函数的方式来得到更快的缩放函数；这<br>
	&nbsp; 有点像编译器的工作原理；要实现它需要的工作量比较大(或比较晦涩)就不再实现了；<br>
	&nbsp; (动态生成是一种不错的思路，但个人觉得对于缩放，实现它的必要性不大)</p>
	<p>&nbsp;&nbsp; g.现代CPU中，在读取数据和写入数据时，都有自动的缓存机制；很容易知道，算法中生<br>
	&nbsp; 成的数据不会很快再次使用，所以不需要写入缓存的帮助；在SSE指令集中增加了movntq<br>
	&nbsp; 等指令来完成这个功能；<br>
	&nbsp; (尝试过利用CPU显式prefetcht0、prefetchnta预读指令或直接的mov读取指令等速度反<br>
	&nbsp;&nbsp; 而略有下降:(&nbsp;&nbsp; 但预读在copy算法中速度优化效果很明显 )</p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom3_SSE(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//警告:&nbsp;函数需要CPU支持MMX和movntq指令<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(0, 0, 255);">if</span>&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;<span style="color: rgb(0, 0, 255);">return</span>;<br>
			&nbsp;&nbsp;&nbsp; unsigned long xrIntFloat_16=(Src.width&lt;&lt;16)/Dst.width+1; <br>
			&nbsp;&nbsp;&nbsp; unsigned long yrIntFloat_16=(Src.height&lt;&lt;16)/Dst.height+1;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pSrcLine=((TARGB32*)((TUInt8*)Src.pdata+Src.byte_width*(srcy_16&gt;&gt;16)));<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;push&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;esi,pSrcLine<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edi,pDstLine<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,xrIntFloat_16<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx,dst_width<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp,ebp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16=0<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;&nbsp;&nbsp;&nbsp;ecx,&nbsp;(not&nbsp;3)&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//循环4次展开<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEST&nbsp;&nbsp;&nbsp;ECX,ECX&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//nop<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jle&nbsp;&nbsp;&nbsp;&nbsp;EndWriteLoop<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edi,[edi+ecx*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//todo:&nbsp;预读<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WriteLoop:<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,ebp<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,[ebp+edx]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm0,[esi+eax*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKlDQ&nbsp;mm0,[esi+ebx*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp,[ebp+edx*2]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;movntq&nbsp;qword&nbsp;ptr&nbsp;[edi+ecx*4],&nbsp;mm0&nbsp;&nbsp;//不使用缓存的写入指令<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;_emit&nbsp;0x0F&nbsp;asm&nbsp;_emit&nbsp;0xE7&nbsp;asm&nbsp;_emit&nbsp;0x04&nbsp;asm&nbsp;_emit&nbsp;0x8F&nbsp;&nbsp;<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,ebp<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,[ebp+edx]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,[esi+eax*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKlDQ&nbsp;mm1,[esi+ebx*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp,[ebp+edx*2]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;movntq&nbsp;qword&nbsp;ptr&nbsp;[edi+ecx*4+8],&nbsp;mm1&nbsp;//不使用缓存的写入指令<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;_emit&nbsp;0x0F&nbsp;asm&nbsp;_emit&nbsp;0xE7&nbsp;asm&nbsp;_emit&nbsp;0x4C&nbsp;asm&nbsp;_emit&nbsp;0x8F&nbsp;asm&nbsp;_emit&nbsp;0x08<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;ecx,&nbsp;4<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jnz&nbsp;WriteLoop<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//sfence&nbsp;//刷新写入</span><span style="color: rgb(0, 0, 0);"><br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 asm _emit 0x0F asm _emit 0xAE asm _emit 
			0xF8&nbsp; <br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emms<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndWriteLoop:<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;ebx,ebp<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop&nbsp;&nbsp;&nbsp;&nbsp;ebp<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//处理边界&nbsp;&nbsp;循环次数为0,1,2,3；(这个循环可以展开,做一个跳转表,略)<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;ecx,dst_width<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and&nbsp;&nbsp;&nbsp;&nbsp;ecx,3<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEST&nbsp;&nbsp;&nbsp;ECX,ECX<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jle&nbsp;&nbsp;&nbsp;&nbsp;EndLineZoom<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edi,[edi+ecx*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartBorder:<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,ebx<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,[esi+eax*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[edi+ecx*4],eax<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,edx<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ECX<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JNZ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StartBorder<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EndLineZoom:<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">
			//=====================================================================</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">
			//鉴于有读者反映汇编代码阅读困难，这里给出一个使用intel提供的函数调用方式的实现，<br>
			//读者可以相互对照来阅读代码<br>
			//要编译PicZoom3_SSE_mmh,需要#include &lt;mmintrin.h&gt; #include &lt;xmmintrin.h&gt;<br>
			//并且需要编译器支持<br>
			//函数PicZoom3_SSE_mmh速度为 593.7 fps</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">void PicZoom3_SSE_mmh(const 
			TPicRegion&amp; Dst,const TPicRegion&amp; Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp; //警告: 函数需要CPU支持MMX和movntq指令</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; if (&nbsp; 
			(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ||(0==Src.width)||(0==Src.height)) return;</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; unsigned long 
			xrIntFloat_16=(Src.width&lt;&lt;16)/Dst.width+1; <br>
			&nbsp;&nbsp;&nbsp; unsigned long yrIntFloat_16=(Src.height&lt;&lt;16)/Dst.height+1;</span></div>
		<div>
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp; unsigned long dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp; TARGB32* pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp; unsigned long srcy_16=0;<br>
			&nbsp;&nbsp;&nbsp; unsigned long for4count=dst_width/4*4;<br>
			&nbsp;&nbsp;&nbsp; for (unsigned long y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TARGB32* 
pSrcLine=((TARGB32*)((TUInt8*)Src.pdata+Src.byte_width*(srcy_16&gt;&gt;16)));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long srcx_16=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (x=0;x&lt;for4count;x+=4)//循环4次展开<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
__m64 m0=_m_from_int(*(int*)(&amp;pSrcLine[srcx_16&gt;&gt;16]));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
m0=_m_punpckldq(m0, 
_m_from_int(*(int*)(&amp;pSrcLine[srcx_16&gt;&gt;16])) 
			);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
__m64 m1=_m_from_int(*(int*)(&amp;pSrcLine[srcx_16&gt;&gt;16]));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
m1=_m_punpckldq(m1, 
_m_from_int(*(int*)(&amp;pSrcLine[srcx_16&gt;&gt;16])) 
			);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mm_stream_pi((__m64 *)&amp;pDstLine[x],m0); //不使用缓存的写入指令<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_mm_stream_pi((__m64 *)&amp;pDstLine[x+2],m1); //不使用缓存的写入指令<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (x=for4count;x&lt;dst_width;++x)//处理边界<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pDstLine[x]=pSrcLine[srcx_16&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp; }<br>
			&nbsp;&nbsp;&nbsp; _m_empty();<br>
			}</span></div>
	</div>
	<p>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp; 711.7&nbsp;fps&nbsp; <br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p><br>
	E: 缩放效果图：</p>
	<p>&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/test0.GIF" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/test1.GIF" alt=""></p>
	<p>&nbsp;&nbsp;&nbsp;&nbsp; 原图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;放大图(x轴放大8倍,y轴放大12倍) </p>
	<p>&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka0.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka1.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka2.JPG" alt=""><br>
	&nbsp;&nbsp;&nbsp;&nbsp; 原图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 缩小图(缩小到0.66倍)&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;放大图(放大到1.6倍) </p>
	<p>F: 把测试成绩放在一起：<br>
	<br>
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: AMD64x2 4200+(2.1G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// 
BitBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;544.7
 fps&nbsp; //is copy 800*600 to 800*600<br>
	// 
BitBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;331.6
 fps&nbsp; //is copy 1024*1024 to 1024*1024<br>
	// StretchBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;232.7 fps&nbsp; //is zoom 800*600 to 1024*1024<br>
	// <br>
	// PicZoom0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;19.4 fps<br>
	// PicZoom1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30.1 fps<br>
	// PicZoom2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;185.8 fps<br>
	// PicZoom3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;414.4 fps<br>
	// PicZoom3_float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;286.2 fps<br>
	// PicZoom3_Table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;390.1 fps<br>
	// PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 711.7&nbsp;fps&nbsp;<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	<p>补充Intel Core2 4400上的测试成绩:<br>
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: Intel Core2 4400(2.00G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// PicZoom0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.0 fps<br>
	// PicZoom1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;63.9 fps<br>
	// PicZoom2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;231.2 fps<br>
	// PicZoom3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;460.5 fps<br>
	// PicZoom3_float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;422.5 fps<br>
	// PicZoom3_Table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;457.6 fps<br>
	// PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1099.7&nbsp;fps&nbsp;<br>
	////////////////////////////////////////////////////////////////////////////////</p>
	
	<p>　</p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	摘要:首先给出一个基本的图像缩放算法，然后一步一步的优化其速度和缩放质量；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	高质量的快速的图像缩放 全文 分为:<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 上篇 近邻取样插值和其速度优化<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 中篇 二次线性插值和三次卷积插值<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 下篇 三次线性插值和MipMap链</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">正文：<br>
	&nbsp; 为了便于讨论，这里只处理32bit的ARGB颜色；<br>
	&nbsp; 代码使用C++;涉及到汇编优化的时候假定为x86平台;使用的编译器为vc2005;<br>
	&nbsp; 为了代码的可读性,没有加入异常处理代码;<br>
	&nbsp;&nbsp; 测试使用的CPU为AMD64x2 4200+(2.37G)&nbsp; 和 Intel Core2 4400(2.00G);</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	速度测试说明:<br>
	&nbsp; 只测试内存数据到内存数据的缩放<br>
	&nbsp; 测试图片都是800*600缩放到1024*768; fps表示每秒钟的帧数,值越大表示函数越快</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	A:近邻取样插值、二次线性插值、三次卷积插值 缩放<strong>效果对比</strong></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka0.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka1.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zaka2.JPG" alt="">&nbsp;&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原
图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&nbsp;近邻取样缩放到0.6倍&nbsp;&nbsp;&nbsp;&nbsp; 近邻取样缩放到1.6倍</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_0.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_1.JPG" alt="">&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
二次线性插值缩放到0.6倍&nbsp;&nbsp;&nbsp;二次线性插值缩放到1.6倍</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3_0.JPG" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3_1.JPG" alt=""><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
三次卷积插值缩放到0.6倍&nbsp;&nbsp;&nbsp;三次卷积插值缩放到1.6倍</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/test0.GIF" alt="">&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom0_8.GIF" alt="">&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_true_8.JPG" alt="">
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3_8.JPG" alt="">&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_8.JPG" alt=""><br>
	&nbsp;原图&nbsp;近邻取样缩放到8倍&nbsp;二次线性插值缩放到8倍&nbsp;三次卷积插值缩放到8倍&nbsp;二次线性插值(近似公式)</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	&nbsp;&nbsp;&nbsp;&nbsp; 近邻取样插值缩放简单、速度快，但很多时候缩放出的图片质量比较差(特别是对于人物、景色等),<br>
	图片的缩放有比较明显的锯齿；使用二次或更高次插值有利于改善缩放效果；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	B: 首先定义图像数据结构:</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 255);">#define</span><span style="color: rgb(0, 0, 0);">&nbsp;asm&nbsp;__asm<br>
			<br>
			typedef&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">char</span><span style="color: rgb(0, 0, 0);">&nbsp;TUInt8;&nbsp;</span><span style="color: rgb(0, 128, 0);">//&nbsp;[0..255]<br>
			</span><span style="color: rgb(0, 0, 255);">struct</span><span style="color: rgb(0, 0, 0);">&nbsp;TARGB32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//32&nbsp;bit&nbsp;color<br>
			</span><span style="color: rgb(0, 0, 0);">{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TUInt8&nbsp;&nbsp;b,g,r,a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//a&nbsp;is&nbsp;alpha<br>
			</span><span style="color: rgb(0, 0, 0);">};<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">struct</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//一块颜色数据区的描述，便于参数传递<br>
			</span><span style="color: rgb(0, 0, 0);">{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;&nbsp;&nbsp;&nbsp;pdata;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//颜色数据首地址<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte_width;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//一行数据的物理宽度(字节宽度)；<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//abs(byte_width)
有可能大于等于width*sizeof(TARGB32);<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//像素宽度<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//像素高度<br>
			</span><span style="color: rgb(0, 0, 0);">};<br>
			<br>
			</span><span style="color: rgb(0, 128, 0);">//那么访问一个点的函数可以写为：<br>
			</span><span style="color: rgb(0, 0, 0);">inline&nbsp;TARGB32&amp;&nbsp;Pixels(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;(TARGB32*)((TUInt8*)pic.pdata+pic.byte_width*y)&nbsp;)[x];<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	<span style="color: rgb(0, 0, 255);"><strong>二次线性插值缩放：</strong></span></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">C: 
	二次线性插值缩放原理和公式图示:</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_map0.gif" alt=""></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 
缩放后图
片&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
原图片<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(宽DW,高
DH)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 (宽SW,高SH) </span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp; 
	缩放映射原理:<br>
	&nbsp; (Sx-0)/(SW-0)=(Dx-0)/(DW-0)&nbsp;&nbsp; (Sy-0)/(SH-0)=(Dy-0)/(DH-0)<br>
	&nbsp;=&gt;&nbsp;&nbsp; 
Sx=Dx*SW/DW&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 Sy=Dy*SH/DH</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp; 
	聚焦看看(Sx,Sy)坐标点(Sx,Sy为浮点数)附近的情况；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2_map1.gif" alt=""></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	&nbsp; 对于近邻取样插值的缩放算法，直接取Color0颜色作为缩放后点的颜色；<br>
	二次线性插值需要考虑(Sx,Sy)坐标点周围的4个颜色值Color0\Color1\Color2\Color3，<br>
	把(Sx,Sy)到A\B\C\D坐标点的距离作为系数来把4个颜色混合出缩放后点的颜色；<br>
	( u=Sx-floor(Sx); v=Sy-floor(Sy);&nbsp;说明:floor函数的返回值为小于等于参数的最大整数 )&nbsp; <br>
	<span style="color: rgb(0, 0, 255);">&nbsp; 二次线性插值公式为:<br>
	&nbsp;tmpColor0=Color0*(1-u) + Color2*u;<br>
	&nbsp;tmpColor1=Color1*(1-u) + Color3*u;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DstColor =tmpColor0*(1-v) + tmpColor2*v; </span></span></p>
	<p>
	<span style="color: rgb(0, 0, 255); font-size: small; font-family: 'courier new',courier">
	&nbsp; 展开公式为:<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm0=(1-u)*(1-v);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm1=v*(1-u);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm2=u*(1-v);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pm3=u*v;<br>
	&nbsp; 则颜色混合公式为:<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DstColor = Color0*pm0 + Color1*pm1 + Color2*pm2 + Color3*pm3; </span>
	</p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	参数函数图示：</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/Bilinear.GIF" alt=""></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;二次线性插值函数图示</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	对于上面的公式，它将图片向右下各移动了半个像素，需要对此做一个修正；<br>
	&nbsp; =&gt;&nbsp;&nbsp; Sx=(Dx+0.5)*SW/DW-0.5; Sy=(Dy+0.5)*SH/DH-0.5;<br>
	而实际的程序,还需要考虑到边界(访问源图片可能超界)对于算法的影响,边界的处理可能有各种<br>
	方案(不处理边界或边界回绕或边界饱和或边界映射或用背景颜色混合等;文章中默认使用边界饱和来处理超界);<br>
	比如:边界饱和函数:&nbsp; </span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 128, 0);">
			//访问一个点的函数，(x,y)坐标可能超出图片边界；&nbsp;//边界处理模式:边界饱和<br>
			</span><span style="color: rgb(0, 0, 0);">
			inline&nbsp;TARGB32&nbsp;Pixels_Bound(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x,</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//assert((pic.width&gt;0)&amp;&amp;(pic.height&gt;0));<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">bool</span><span style="color: rgb(0, 0, 0);">&nbsp;IsInPic=</span><span style="color: rgb(0, 0, 255);">true</span><span style="color: rgb(0, 0, 0);">;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&lt;0)&nbsp;{x=0;&nbsp;IsInPic=</span><span style="color: rgb(0, 0, 255);">false</span><span style="color: rgb(0, 0, 0);">;&nbsp;}&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&gt;=pic.width&nbsp;)&nbsp;{x=pic.width&nbsp;-1;&nbsp;IsInPic=</span><span style="color: rgb(0, 0, 255);">false</span><span style="color: rgb(0, 0, 0);">;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(y&lt;0)&nbsp;{y=0;&nbsp;IsInPic=</span><span style="color: rgb(0, 0, 255);">false</span><span style="color: rgb(0, 0, 0);">;&nbsp;}&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(y&gt;=pic.height)&nbsp;{y=pic.height-1;&nbsp;IsInPic=</span><span style="color: rgb(0, 0, 255);">false</span><span style="color: rgb(0, 0, 0);">;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;result=Pixels(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(!IsInPic)&nbsp;result.a=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;result;<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">D: 
	二次线性插值缩放算法的一个参考实现：PicZoom_BilInear0<br>
	&nbsp; 该函数并没有做什么优化，只是一个简单的浮点实现版本；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear0(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fx,</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fy,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)fx;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&gt;fx)&nbsp;--x;&nbsp;</span><span style="color: rgb(0, 128, 0);">//x=floor(fx);&nbsp;&nbsp;&nbsp;&nbsp;<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)fy;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(y&gt;fy)&nbsp;--y;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y=floor(fy);<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color0=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color2=Pixels_Bound(pic,x+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color1=Pixels_Bound(pic,x,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color3=Pixels_Bound(pic,x+1,y+1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;u=fx-x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;v=fy-y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;pm3=u*v;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;pm2=u*(1-v);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;pm1=v*(1-u);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;pm0=(1-u)*(1-v);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;a=(pm0*Color0.a+pm1*Color1.a+pm2*Color2.a+pm3*Color3.a);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;r=(pm0*Color0.r+pm1*Color1.r+pm2*Color2.r+pm3*Color3.r);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;g=(pm0*Color0.g+pm1*Color1.g+pm2*Color2.g+pm3*Color3.g);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;b=(pm0*Color0.b+pm1*Color1.b+pm2*Color2.b+pm3*Color3.b);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear0(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=(y+0.4999999)*Src.height/Dst.height-0.5;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx=(x+0.4999999)*Src.width/Dst.width-0.5;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear0(Src,srcx,srcy,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_BilInear0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3 fps<br>
	////////////////////////////////////////////////////////////////////////////////<br>
　</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">E: 
	把PicZoom_BilInear0的浮点计算改写为定点数实现：PicZoom_BilInear1</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear1(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=x_16&gt;&gt;16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=y_16&gt;&gt;16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color0=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color2=Pixels_Bound(pic,x+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color1=Pixels_Bound(pic,x,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;Color3=Pixels_Bound(pic,x+1,y+1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_8=(x_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(y_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm3_16=(u_8*v_8);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm2_16=(u_8*(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(256-v_8));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm1_16=(v_8*(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(256-u_8));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm0_16=((256-u_8)*(256-v_8));<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;a=((pm0_16*Color0.a+pm1_16*Color1.a+pm2_16*Color2.a+pm3_16*Color3.a)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;r=((pm0_16*Color0.r+pm1_16*Color1.r+pm2_16*Color2.r+pm3_16*Color3.r)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;g=((pm0_16*Color0.g+pm1_16*Color1.g+pm2_16*Color2.g+pm3_16*Color3.g)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;b=((pm0_16*Color0.b+pm1_16*Color1.b+pm2_16*Color2.b+pm3_16*Color3.b)&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear1(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear1(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}&nbsp;</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_BilInear1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17.7 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">F: 
	二次线性插值需要考略边界访问超界的问题，我们可以将边界区域和内部区域分开处理，这样就可以优化内部的插值实现函数了：比如不需要判断访问超界、减少颜色数据复制、减少一些不必要的重复坐标计算等等</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear2_Fast(TARGB32*&nbsp;PColor0,TARGB32*&nbsp;PColor1,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_8,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm3_16=u_8*v_8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm2_16=(u_8&lt;&lt;8)-pm3_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm1_16=(v_8&lt;&lt;8)-pm3_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm0_16=(1&lt;&lt;16)-pm1_16-pm2_16-pm3_16;<br>
			&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;a=((pm0_16*PColor0[0].a+pm2_16*PColor0[1].a+pm1_16*PColor1[0].a+pm3_16*PColor1[1].a)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;r=((pm0_16*PColor0[0].r+pm2_16*PColor0[1].r+pm1_16*PColor1[0].r+pm3_16*PColor1[1].r)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;g=((pm0_16*PColor0[0].g+pm2_16*PColor0[1].g+pm1_16*PColor1[0].g+pm3_16*PColor1[1].g)&gt;&gt;16);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;b=((pm0_16*PColor0[0].b+pm2_16*PColor0[1].b+pm1_16*PColor1[0].b+pm3_16*PColor1[1].b)&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear2_Border(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=(x_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=(y_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(x_16));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(y_16));<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[4];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[0]=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[1]=Pixels_Bound(pic,x+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[2]=Pixels_Bound(pic,x,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[3]=Pixels_Bound(pic,x+1,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Fast(&amp;pixel[0],&amp;pixel[2],u_16&gt;&gt;8,v_16&gt;&gt;8,result);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear2(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=-csDErrorY/yrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=0;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=-csDErrorY/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=-csDErrorX/xrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-2)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-2)&nbsp;=&gt;&nbsp;y&lt;=(height-2-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-2)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Src_byte_width=Src.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Border(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Border(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(srcy_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColor=&nbsp;(TARGB32*)((TUInt8*)(Src.pdata)+Src_byte_width*(srcy_16&gt;&gt;16))&nbsp;;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=border_x0;x&lt;border_x1;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor0=&amp;PSrcLineColor[srcx_16&gt;&gt;16];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor1=(TARGB32*)((TUInt8*)(PColor0)+Src_byte_width);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Fast(PColor0,PColor1,(srcx_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8,v_8,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Border(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear2_Border(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_BilInear2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43.4 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">(F'补充:<br>
	&nbsp; 如果不想处理边界访问超界问题，可以考虑扩大源图片的尺寸，加一个边框 (“哨兵”优化)；<br>
	这样插值算法就不用考虑边界问题了，程序写起来也简单很多!&nbsp;<br>
	&nbsp;&nbsp;如果对缩放结果的边界像素级精度要求不是太高，我还有一个方案，一个稍微改变的缩放公式:<br>
	&nbsp; Sx=Dx*(SW-1)/DW； Sy=Dy*(SH-1)/DH；&nbsp;&nbsp;(源图片宽和高:SW&gt;=2;SH&gt;=2)<br>
	&nbsp; 证明这个公式不会造成内存访问超界:&nbsp;<br>
	&nbsp;&nbsp;&nbsp;要求Dx=DW-1时: sx+1=int( (dw-1)/dw*(dw-1) ) +1 &lt;= (sw-1)<br>
	&nbsp; &nbsp; &nbsp; 有: &nbsp;int( (sw-1)*(dw-1)/dw ) &lt;=sw-2<br>
	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(sw-1)*(dw-1)/dw &lt;(sw-1)<br>
	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(dw-1) /dw&lt;1<br>
	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(dw-1) &lt;dw<br>
	&nbsp;&nbsp;比如，按这个公式的一个简单实现:&nbsp;(缩放效果见前面的"二次线性插值(近似公式)"图示)</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_ftBilinear_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(2&gt;Src.width)||(2&gt;Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width-1)&lt;&lt;16)/Dst.width;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height-1)&lt;&lt;16)/Dst.height;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Src_byte_width=Src.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(srcy_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColor=&nbsp;(TARGB32*)((TUInt8*)(Src.pdata)+Src_byte_width*(srcy_16&gt;&gt;16))&nbsp;;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor0=&amp;PSrcLineColor[srcx_16&gt;&gt;16];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Fast_Common(PColor0,(TARGB32*)((TUInt8*)(PColor0)+Src_byte_width),(srcx_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8,v_8,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}&nbsp;</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	)</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	G:利用单指令多数据处理的MMX指令一般都可以加快颜色的运算；在使用MMX改写之前，利用<br>
	32bit寄存器(或变量)来模拟单指令多数据处理；<br>
	数据储存原理:一个颜色数据分量只有一个字节,用2个字节来储存单个颜色分量的计算结果，<br>
	对于很多颜色计算来说精度就够了；那么一个32bit寄存器(或变量)就可以储存2个计算出的<br>
	临时颜色分量；从而达到了单个指令两路数据处理的目的;<br>
	单个指令两路数据处理的计算: <br>
	&nbsp; 乘法： ((0x00AA*a)&lt;&lt;16) | (0x00BB*a) = 0x00AA00BB * a <br>
	&nbsp;&nbsp;&nbsp; 可见只要保证0x00AA*a和0x00BB*a都小于(1&lt;&lt;16)那么乘法可以直接使用无符号数乘法了<br>
	&nbsp; 加法: ((0x00AA+0x00CC)&lt;&lt;16) | (0x00BB+0x00DD) = 0x00AA00BB + 0x00CC00DD <br>
	&nbsp;&nbsp;&nbsp; 可见只要0x00AA+0x00CC和0x00BB+0x00DD小于(1&lt;&lt;16)那么加法可以直接使用无符号数加法了<br>
	&nbsp; (移位、减法等稍微复杂一点,因为这里没有用到就不推倒运算公式了)</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear_Fast_Common(TARGB32*&nbsp;PColor0,TARGB32*&nbsp;PColor1,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_8,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm3_8=(u_8*v_8)&gt;&gt;8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm2_8=u_8-pm3_8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm1_8=v_8-pm3_8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pm0_8=256-pm1_8-pm2_8-pm3_8;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Color=*(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*)(PColor0);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;BR=(Color&nbsp;&amp;&nbsp;0x00FF00FF)*pm0_8;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;GA=((Color&nbsp;&amp;&nbsp;0xFF00FF00)&gt;&gt;8)*pm0_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*)(PColor0))[1];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GA+=((Color&nbsp;&amp;&nbsp;0xFF00FF00)&gt;&gt;8)*pm2_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BR+=(Color&nbsp;&amp;&nbsp;0x00FF00FF)*pm2_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color=*(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*)(PColor1);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GA+=((Color&nbsp;&amp;&nbsp;0xFF00FF00)&gt;&gt;8)*pm1_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BR+=(Color&nbsp;&amp;&nbsp;0x00FF00FF)*pm1_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*)(PColor1))[1];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GA+=((Color&nbsp;&amp;&nbsp;0xFF00FF00)&gt;&gt;8)*pm3_8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BR+=(Color&nbsp;&amp;&nbsp;0x00FF00FF)*pm3_8;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">*)(result)=(GA&nbsp;&amp;&nbsp;0xFF00FF00)|((BR&nbsp;&amp;&nbsp;0xFF00FF00)&gt;&gt;8);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear_Border_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=(x_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=(y_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(x_16));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(y_16));<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[4];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[0]=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[1]=Pixels_Bound(pic,x+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[2]=Pixels_Bound(pic,x,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[3]=Pixels_Bound(pic,x+1,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Fast_Common(&amp;pixel[0],&amp;pixel[2],u_16&gt;&gt;8,v_16&gt;&gt;8,result);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=-csDErrorY/yrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=0;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=-csDErrorY/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=-csDErrorX/xrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-2)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-2)&nbsp;=&gt;&nbsp;y&lt;=(height-2-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-2)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Src_byte_width=Src.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(srcy_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColor=&nbsp;(TARGB32*)((TUInt8*)(Src.pdata)+Src_byte_width*(srcy_16&gt;&gt;16))&nbsp;;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=border_x0;x&lt;border_x1;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor0=&amp;PSrcLineColor[srcx_16&gt;&gt;16];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor1=(TARGB32*)((TUInt8*)(PColor0)+Src_byte_width);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Fast_Common(PColor0,PColor1,(srcx_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8,v_8,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_BilInear_Common&nbsp;&nbsp;&nbsp;65.3 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	H:使用MMX指令改写:PicZoom_Bilinear_MMX</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;Bilinear_Fast_MMX(TARGB32*&nbsp;PColor0,TARGB32*&nbsp;PColor1,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_8,unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM6,v_8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM5,u_8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,PColor0<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,PColor1<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PXOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm7,mm7<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM2,dword&nbsp;ptr&nbsp;[eax]&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,dword&nbsp;ptr&nbsp;[eax+4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLWD&nbsp;&nbsp;&nbsp;&nbsp;MM5,MM5<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLWD&nbsp;&nbsp;&nbsp;&nbsp;MM6,MM6<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM3,dword&nbsp;ptr&nbsp;[edx]&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,dword&nbsp;ptr&nbsp;[edx+4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLDQ&nbsp;&nbsp;&nbsp;&nbsp;MM5,MM5&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM2,MM7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM3,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM2<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM3<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM2,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM3,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM5<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM5<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLDQ&nbsp;&nbsp;&nbsp;&nbsp;MM6,MM6&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM2<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM3<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM1<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM6<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,result<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM1<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PACKUSwb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[eax],MM0&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//emms<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;Bilinear_Border_MMX(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=(x_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=(y_16&gt;&gt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(x_16));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_16=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(y_16));<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[4];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[0]=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[1]=Pixels_Bound(pic,x+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[2]=Pixels_Bound(pic,x,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[3]=Pixels_Bound(pic,x+1,y+1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Fast_MMX(&amp;pixel[0],&amp;pixel[2],u_16&gt;&gt;8,v_16&gt;&gt;8,result);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear_MMX(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=-csDErrorY/yrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=0;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=-csDErrorY/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=-csDErrorX/xrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-2)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-2)&nbsp;=&gt;&nbsp;y&lt;=(height-2-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-2)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Src_byte_width=Src.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(srcy_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColor=&nbsp;(TARGB32*)((TUInt8*)(Src.pdata)+Src_byte_width*(srcy_16&gt;&gt;16))&nbsp;;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=border_x0;x&lt;border_x1;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor0=&amp;PSrcLineColor[srcx_16&gt;&gt;16];<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PColor1=(TARGB32*)((TUInt8*)(PColor0)+Src_byte_width);<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Fast_MMX(PColor0,PColor1,(srcx_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8,v_8,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;emms<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_BilInear_MMX&nbsp;132.9 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">H' 
	对BilInear_MMX简单改进:PicZoom_Bilinear_MMX_Ex</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_Bilinear_MMX_Ex(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=-csDErrorY/yrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=0;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=-csDErrorY/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=-csDErrorX/xrIntFloat_16+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-2)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-2)&nbsp;=&gt;&nbsp;y&lt;=(height-2-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-2)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Src_byte_width=Src.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width_fast=border_x1-border_x0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(dst_width_fast&gt;0)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(srcy_16&nbsp;&amp;&nbsp;0xFFFF)&gt;&gt;8;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColor=&nbsp;(TARGB32*)((TUInt8*)(Src.pdata)+Src_byte_width*(srcy_16&gt;&gt;16))&nbsp;;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;PSrcLineColorNext=&nbsp;(TARGB32*)((TUInt8*)(PSrcLineColor)+Src_byte_width)&nbsp;;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine_Fast=&amp;pDstLine[border_x0];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm6,v_8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pxor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm7,mm7&nbsp;</span><span style="color: rgb(0, 128, 0);">//mm7=0<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLWD&nbsp;&nbsp;&nbsp;&nbsp;MM6,MM6<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLDQ&nbsp;&nbsp;&nbsp;&nbsp;MM6,MM6</span><span style="color: rgb(0, 128, 0);">//mm6=v_8<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;esi,PSrcLineColor<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx,PSrcLineColorNext<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,srcx_16<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,dst_width_fast<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edi,pDstLine_Fast<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edi,[edi+ebx*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;push&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp,xrIntFloat_16<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop_start:<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,edx<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,24<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//==&nbsp;movzx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,dh&nbsp;&nbsp;//eax=u_8<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM5,eax<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,edx<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16&gt;&gt;16<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM2,dword&nbsp;ptr&nbsp;[ecx+eax*4]&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,dword&nbsp;ptr&nbsp;[ecx+eax*4+4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLWD&nbsp;&nbsp;&nbsp;&nbsp;MM5,MM5<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM3,dword&nbsp;ptr&nbsp;[esi+eax*4]&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,dword&nbsp;ptr&nbsp;[esi+eax*4+4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLDQ&nbsp;&nbsp;&nbsp;&nbsp;MM5,MM5&nbsp;</span><span style="color: rgb(0, 128, 0);">//mm5=u_8<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM2,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PUNPCKLBW&nbsp;&nbsp;&nbsp;&nbsp;MM3,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM2<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM3<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM2,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM3,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM5<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM5<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM2<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,MM3<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSUBw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM1<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSLLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM1,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PMULlw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM6<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PADDw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,MM1<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PSRLw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MM0,8<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PACKUSwb&nbsp;&nbsp;MM0,MM7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVd&nbsp;&nbsp;&nbsp;dword&nbsp;ptr&nbsp;&nbsp;&nbsp;&nbsp;[edi+ebx*4],MM0&nbsp;</span><span style="color: rgb(0, 128, 0);">//write&nbsp;DstColor<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,ebp&nbsp;</span><span style="color: rgb(0, 128, 0);">//srcx_16+=xrIntFloat_16<br>
			</span><span style="color: rgb(0, 0, 0);">
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jnz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop_start<br>
			<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebp<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16,edx<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bilinear_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;asm&nbsp;emms<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_Bilinear_MMX_Ex&nbsp;157.0 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">I: 
	把测试成绩放在一起：</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: AMD64x2 4200+(2.37G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// 
StretchBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 232.7 fps&nbsp;&nbsp; <br>
	// PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;711.7 fps <br>
	// <br>
	// PicZoom_BilInear0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8.3 fps<br>
	// PicZoom_BilInear1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17.7 fps<br>
	// PicZoom_BilInear2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43.4 fps<br>
	// PicZoom_BilInear_Common&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;65.3 fps<br>
	// PicZoom_BilInear_MMX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;132.9 fps<br>
	// PicZoom_BilInear_MMX_Ex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;157.0 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	补充Intel Core2 4400上的测试成绩:</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: Intel Core2 4400(2.00G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// 
PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1099.7&nbsp;fps&nbsp;&nbsp;<br>
	// <br>
	// PicZoom_BilInear0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.7&nbsp;fps<br>
	// PicZoom_BilInear1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 24.2 fps<br>
	// PicZoom_BilInear2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 54.3 fps<br>
	// PicZoom_BilInear_Common&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 59.8 fps<br>
	// PicZoom_BilInear_MMX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;118.4 fps<br>
	// PicZoom_BilInear_MMX_Ex&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;142.9 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p>　</p>
	<p>　</p>
	<p>
	<span style="color: rgb(0, 0, 255); font-size: small; font-family: 'courier new',courier">
	<strong>三次卷积插值:</strong></span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
	J: 二次线性插值缩放出的图片很多时候让人感觉变得模糊(术语叫低通滤波)，特别是在放大<br>
	的时候；使用三次卷积插值来改善插值结果；三次卷积插值考虑映射点周围16个点(4x4)的颜色来<br>
	计算最终的混合颜色，如图；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom4_map.gif" alt=""><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P(0,0)所在像素为映射的点，加上它周围的15个点，按一定系数混合得到最终输出结果；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;混合公式参见PicZoom_ThreeOrder0的实现；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;&nbsp;&nbsp; 
	插值曲线公式sin(x*PI)/(x*PI),如图:</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	<img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/sinxdivx2.GIF" alt=""><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
三次卷积插值曲线sin(x*PI)/(x*PI) （其中PI=3.1415926...）</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;
	</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	K:三次卷积插值缩放算法的一个参考实现：PicZoom_ThreeOrder0<br>
	&nbsp; 该函数并没有做过多的优化，只是一个简单的浮点实现版本; </span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">double</span><span style="color: rgb(0, 0, 0);">&nbsp;SinXDivX(</span><span style="color: rgb(0, 0, 255);">double</span><span style="color: rgb(0, 0, 0);">&nbsp;x)&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//该函数计算插值曲线sin(x*PI)/(x*PI)的值&nbsp;//PI=3.1415926535897932385;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//下面是它的近似拟合表达式<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;a&nbsp;=&nbsp;-1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//a还可以取&nbsp;a=-2,-1,-0.75,-0.5等等，起到调节锐化或模糊程度的作用<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&lt;0)&nbsp;x=-x;&nbsp;</span><span style="color: rgb(0, 128, 0);">//x=abs(x);<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">double</span><span style="color: rgb(0, 0, 0);">&nbsp;x2=x*x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">double</span><span style="color: rgb(0, 0, 0);">&nbsp;x3=x2*x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&lt;=1)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;(a+2)*x3&nbsp;-&nbsp;(a+3)*x2&nbsp;+&nbsp;1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x&lt;=2)&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;a*x3&nbsp;-&nbsp;(5*a)*x2&nbsp;+&nbsp;(8*a)*x&nbsp;-&nbsp;(4*a);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;TUInt8&nbsp;border_color(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;Color)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(Color&lt;=0)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(Color&gt;=255)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;255;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;Color;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;ThreeOrder0(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fx,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fy,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x0=(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)fx;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(x0&gt;fx)&nbsp;--x0;&nbsp;</span><span style="color: rgb(0, 128, 0);">//x0=floor(fx);&nbsp;&nbsp;&nbsp;&nbsp;<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y0=(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)fy;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(y0&gt;fy)&nbsp;--y0;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0=floor(fy);<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fu=fx-x0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;fv=fy-y0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i,j;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(i=0;i&lt;4;++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(j=0;j&lt;4;++j)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=x0-1+j;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=y0-1+i;<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+j]=Pixels_Bound(pic,x,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;afu[4],afv[4];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afu[0]=SinXDivX(1+fu);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afu[1]=SinXDivX(fu);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afu[2]=SinXDivX(1-fu);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afu[3]=SinXDivX(2-fu);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afv[0]=SinXDivX(1+fv);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afv[1]=SinXDivX(fv);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afv[2]=SinXDivX(1-fv);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;afv[3]=SinXDivX(2-fv);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;sR=0,sG=0,sB=0,sA=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(i=0;i&lt;4;++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;aR=0,aG=0,aB=0,aA=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;j=0;j&lt;4;++j)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aA+=afu[j]*pixel[i*4+j].a;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aR+=afu[j]*pixel[i*4+j].r;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aG+=afu[j]*pixel[i*4+j].g;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aB+=afu[j]*pixel[i*4+j].b;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sA+=aA*afv[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sR+=aR*afv[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sG+=aG*afv[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sB+=aB*afv[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;a=border_color((</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(sA+0.5));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;r=border_color((</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(sR+0.5));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;g=border_color((</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(sG+0.5));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;b=border_color((</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(sB+0.5));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_ThreeOrder0(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=0;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy=(y+0.4999999)*Src.height/Dst.height-0.5;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx=(x+0.4999999)*Src.width/Dst.width-0.5;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder0(Src,srcx,srcy,&amp;pDstLine[x]);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_ThreeOrder0&nbsp;&nbsp;&nbsp;&nbsp;3.6 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	L:&nbsp;使用定点数来优化缩放函数;边界和内部分开处理；对SinXDivX做一个查找表;对border_color做一个查找表；</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;SinXDivX_Table_8[(2&lt;&lt;8)+1];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">class</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAutoInti_SinXDivX_Table&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">private</span><span style="color: rgb(0, 0, 0);">:&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;_Inti_SinXDivX_Table()<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i=0;i&lt;=(2&lt;&lt;8);++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SinXDivX_Table_8[i]=</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">(0.5+256*SinXDivX(i*(1.0/(256))))*1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 0);">:<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_CAutoInti_SinXDivX_Table()&nbsp;{&nbsp;_Inti_SinXDivX_Table();&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;};<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAutoInti_SinXDivX_Table&nbsp;__tmp_CAutoInti_SinXDivX_Table;<br>
			<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//颜色查表<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;TUInt8&nbsp;_color_table[256*3];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TUInt8*&nbsp;color_table=&amp;_color_table[256];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">class</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAuto_inti_color_table<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 0);">:<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_CAuto_inti_color_table()&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">int</span><span style="color: rgb(0, 0, 0);">&nbsp;i=0;i&lt;256*3;++i)<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_color_table[i]=border_color(i-256);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;};<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAuto_inti_color_table&nbsp;_Auto_inti_color_table;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;ThreeOrder_Fast_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_8=(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">char</span><span style="color: rgb(0, 0, 0);">)((x_16)&gt;&gt;8);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_8=(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">char</span><span style="color: rgb(0, 0, 0);">)((y_16)&gt;&gt;8);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TARGB32*&nbsp;pixel=&amp;Pixels(pic,(x_16&gt;&gt;16)-1,(y_16&gt;&gt;16)-1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;pic_byte_width=pic.byte_width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;au_8[4],av_8[4];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;au_8[0]=SinXDivX_Table_8[(1&lt;&lt;8)+u_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;au_8[1]=SinXDivX_Table_8[u_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;au_8[2]=SinXDivX_Table_8[(1&lt;&lt;8)-u_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;au_8[3]=SinXDivX_Table_8[(2&lt;&lt;8)-u_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;av_8[0]=SinXDivX_Table_8[(1&lt;&lt;8)+v_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;av_8[1]=SinXDivX_Table_8[v_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;av_8[2]=SinXDivX_Table_8[(1&lt;&lt;8)-v_8];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;av_8[3]=SinXDivX_Table_8[(2&lt;&lt;8)-v_8];<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;sR=0,sG=0,sB=0,sA=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i=0;i&lt;4;++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;aA=au_8[0]*pixel[0].a&nbsp;+&nbsp;au_8[1]*pixel[1].a&nbsp;+&nbsp;au_8[2]*pixel[2].a&nbsp;+&nbsp;au_8[3]*pixel[3].a;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;aR=au_8[0]*pixel[0].r&nbsp;+&nbsp;au_8[1]*pixel[1].r&nbsp;+&nbsp;au_8[2]*pixel[2].r&nbsp;+&nbsp;au_8[3]*pixel[3].r;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;aG=au_8[0]*pixel[0].g&nbsp;+&nbsp;au_8[1]*pixel[1].g&nbsp;+&nbsp;au_8[2]*pixel[2].g&nbsp;+&nbsp;au_8[3]*pixel[3].g;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;aB=au_8[0]*pixel[0].b&nbsp;+&nbsp;au_8[1]*pixel[1].b&nbsp;+&nbsp;au_8[2]*pixel[2].b&nbsp;+&nbsp;au_8[3]*pixel[3].b;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sA+=aA*av_8[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sR+=aR*av_8[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sG+=aG*av_8[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sB+=aB*av_8[i];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pixel)+=pic_byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;a=color_table[sA&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;r=color_table[sR&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;g=color_table[sG&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result-&gt;b=color_table[sB&gt;&gt;16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;ThreeOrder_Border_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x0_sub1=(x_16&gt;&gt;16)-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y0_sub1=(y_16&gt;&gt;16)-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_16_add1=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(x_16))+(1&lt;&lt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_16_add1=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(y_16))+(1&lt;&lt;16);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[16];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(i=0;i&lt;4;++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=y0_sub1+i;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+0]=Pixels_Bound(pic,x0_sub1+0,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+1]=Pixels_Bound(pic,x0_sub1+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+2]=Pixels_Bound(pic,x0_sub1+2,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+3]=Pixels_Bound(pic,x0_sub1+3,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPicRegion&nbsp;npic;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npic.pdata&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&amp;pixel[0];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npic.byte_width=4*</span><span style="color: rgb(0, 0, 255);">sizeof</span><span style="color: rgb(0, 0, 0);">(TARGB32);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//npic.width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=4;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//npic.height&nbsp;&nbsp;&nbsp;&nbsp;=4;<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Fast_Common(npic,u_16_add1,v_16_add1,result);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_ThreeOrder_Common(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=((1&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=1;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=(1-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=((1&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-3)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-3)&nbsp;=&gt;&nbsp;y&lt;=(height-3-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-3)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x0;x&lt;border_x1;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Fast_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//fast&nbsp;&nbsp;!<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_Common(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_ThreeOrder_Common&nbsp;&nbsp;&nbsp;&nbsp;16.9 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;M: 
	用MMX来优化ThreeOrder_Common函数:ThreeOrder_MMX</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier"><br>
　</span></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="font-size: small; font-family: 'courier new',courier">
			<span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;TMMXData32;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;TMMXData32&nbsp;SinXDivX_Table_MMX[(2&lt;&lt;8)+1];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">class</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAutoInti_SinXDivX_Table_MMX&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">private</span><span style="color: rgb(0, 0, 0);">:&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;_Inti_SinXDivX_Table_MMX()<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i=0;i&lt;=(2&lt;&lt;8);++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">&nbsp;t=</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">(0.5+(1&lt;&lt;14)*SinXDivX(i*(1.0/(256))));<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;tl=t&nbsp;|&nbsp;(((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)t)&lt;&lt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SinXDivX_Table_MMX[i]=tl;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 0);">:<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_CAutoInti_SinXDivX_Table_MMX()&nbsp;{&nbsp;_Inti_SinXDivX_Table_MMX();&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;};<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 0);">&nbsp;_CAutoInti_SinXDivX_Table_MMX&nbsp;__tmp_CAutoInti_SinXDivX_Table_MMX;<br>
			<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;__declspec(naked)&nbsp;_private_ThreeOrder_Fast_MMX()<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,dword&nbsp;ptr&nbsp;[edx]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm2,dword&nbsp;ptr&nbsp;[edx+4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm3,dword&nbsp;ptr&nbsp;[edx+8]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm4,dword&nbsp;ptr&nbsp;[edx+12]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm5,dword&nbsp;ptr&nbsp;[(offset&nbsp;SinXDivX_Table_MMX)+256*4+eax*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm6,dword&nbsp;ptr&nbsp;[(offset&nbsp;SinXDivX_Table_MMX)+eax*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklbw&nbsp;&nbsp;&nbsp;mm1,mm7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklbw&nbsp;&nbsp;&nbsp;mm2,mm7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklwd&nbsp;&nbsp;&nbsp;mm5,mm5<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklwd&nbsp;&nbsp;&nbsp;mm6,mm6<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psllw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psllw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm2,7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,mm5<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm2,mm6<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklbw&nbsp;&nbsp;&nbsp;mm3,mm7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklbw&nbsp;&nbsp;&nbsp;mm4,mm7<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm5,dword&nbsp;ptr&nbsp;[(offset&nbsp;SinXDivX_Table_MMX)+256*4+ecx*4]<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm6,dword&nbsp;ptr&nbsp;[(offset&nbsp;SinXDivX_Table_MMX)+512*4+ecx*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklwd&nbsp;&nbsp;&nbsp;mm5,mm5<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklwd&nbsp;&nbsp;&nbsp;mm6,mm6<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psllw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm3,7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psllw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm4,7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm3,mm5<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm4,mm6<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paddsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,mm2<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paddsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm3,mm4<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm6,dword&nbsp;ptr&nbsp;[ebx]&nbsp;</span><span style="color: rgb(0, 128, 0);">//v<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paddsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,mm3<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;punpcklwd&nbsp;&nbsp;&nbsp;mm6,mm6<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pmulhw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm1,mm6<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,esi&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//+pic.byte_width<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paddsw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm0,mm1<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;ThreeOrder_Fast_MMX(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asm<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx,pic<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,y_16<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,x_16<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movzx&nbsp;&nbsp;&nbsp;edi,ah&nbsp;</span><span style="color: rgb(0, 128, 0);">//v_8<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,[ecx+TPicRegion::pdata]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,16<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;esi,[ecx+TPicRegion::byte_width]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movzx&nbsp;&nbsp;&nbsp;ecx,bh&nbsp;</span><span style="color: rgb(0, 128, 0);">//u_8<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ebx,16<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imul&nbsp;&nbsp;&nbsp;&nbsp;eax,esi<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,[edx+ebx*4-4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,eax&nbsp;</span><span style="color: rgb(0, 128, 0);">//pixel<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,ecx<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecx<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pxor&nbsp;&nbsp;&nbsp;&nbsp;mm7,mm7&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//0<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edx,pixel<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pxor&nbsp;&nbsp;&nbsp;&nbsp;mm0,mm0&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//result=0<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//lea&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,auv_7<br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;ebx,[(offset&nbsp;SinXDivX_Table_MMX)+256*4+edi*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call&nbsp;&nbsp;_private_ThreeOrder_Fast_MMX<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;ebx,[(offset&nbsp;SinXDivX_Table_MMX)+edi*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call&nbsp;&nbsp;_private_ThreeOrder_Fast_MMX<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg&nbsp;&nbsp;&nbsp;&nbsp;edi<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;ebx,[(offset&nbsp;SinXDivX_Table_MMX)+256*4+edi*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call&nbsp;&nbsp;_private_ThreeOrder_Fast_MMX<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lea&nbsp;&nbsp;&nbsp;&nbsp;ebx,[(offset&nbsp;SinXDivX_Table_MMX)+512*4+edi*4]<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;call&nbsp;&nbsp;_private_ThreeOrder_Fast_MMX<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psraw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mm0,3<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eax,result<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;packuswb&nbsp;&nbsp;mm0,mm7<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[eax],mm0<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//emms<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;ThreeOrder_Border_MMX(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;pic,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x_16,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y_16,TARGB32*&nbsp;result)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x0_sub1=(x_16&gt;&gt;16)-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y0_sub1=(y_16&gt;&gt;16)-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;u_16_add1=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(x_16))+(1&lt;&lt;16);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;v_16_add1=((unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">short</span><span style="color: rgb(0, 0, 0);">)(y_16))+(1&lt;&lt;16);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TARGB32&nbsp;pixel[16];<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;i=0;i&lt;4;++i)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y=y0_sub1+i;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+0]=Pixels_Bound(pic,x0_sub1&nbsp;&nbsp;,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+1]=Pixels_Bound(pic,x0_sub1+1,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+2]=Pixels_Bound(pic,x0_sub1+2,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel[i*4+3]=Pixels_Bound(pic,x0_sub1+3,y);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TPicRegion&nbsp;npic;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npic.pdata&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&amp;pixel[0];<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npic.byte_width=4*</span><span style="color: rgb(0, 0, 255);">sizeof</span><span style="color: rgb(0, 0, 0);">(TARGB32);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//npic.width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=4;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//npic.height&nbsp;&nbsp;&nbsp;&nbsp;=4;<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Fast_MMX(npic,u_16_add1,v_16_add1,result);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			<br>
			</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);">&nbsp;PicZoom_ThreeOrder_MMX(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Dst,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TPicRegion&amp;&nbsp;Src)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;&nbsp;(0==Dst.width)||(0==Dst.height)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||(0==Src.width)||(0==Src.height))&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;xrIntFloat_16=((Src.width)&lt;&lt;16)/Dst.width+1;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;yrIntFloat_16=((Src.height)&lt;&lt;16)/Dst.height+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorX=-(1&lt;&lt;15)+(xrIntFloat_16&gt;&gt;1);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;csDErrorY=-(1&lt;&lt;15)+(yrIntFloat_16&gt;&gt;1);<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dst_width=Dst.width;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//计算出需要特殊处理的边界<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y0=((1&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&gt;=1;&nbsp;y0=csDErrorY&nbsp;=&gt;&nbsp;y&gt;=(1-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y0&gt;=Dst.height)&nbsp;border_y0=Dst.height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x0=((1&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x0&gt;=Dst.width&nbsp;)&nbsp;border_x0=Dst.width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_y1=(((Src.height-3)&lt;&lt;16)-csDErrorY)/yrIntFloat_16+1;&nbsp;</span><span style="color: rgb(0, 128, 0);">//y0+y*yr&lt;=(height-3)&nbsp;=&gt;&nbsp;y&lt;=(height-3-csDErrorY)/yr<br>
			</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_y1&lt;border_y0)&nbsp;border_y1=border_y0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;border_x1=(((Src.width-3)&lt;&lt;16)-csDErrorX)/xrIntFloat_16+1;;&nbsp;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(border_x1&lt;border_x0)&nbsp;border_x1=border_x0;<br>
			<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TARGB32*&nbsp;pDstLine=Dst.pdata;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcy_16=csDErrorY;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;y;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=0;y&lt;border_y0;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y0;y&lt;border_y1;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=0;x&lt;border_x0;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x0;x&lt;border_x1;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Fast_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//fast&nbsp;MMX&nbsp;!<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(x=border_x1;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(y=border_y1;y&lt;Dst.height;++y)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;srcx_16=csDErrorX;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">for</span><span style="color: rgb(0, 0, 0);">&nbsp;(unsigned&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;x=0;x&lt;dst_width;++x)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreeOrder_Border_MMX(Src,srcx_16,srcy_16,&amp;pDstLine[x]);&nbsp;</span><span style="color: rgb(0, 128, 0);">//border<br>
			</span><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcx_16+=xrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srcy_16+=yrIntFloat_16;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((TUInt8*&amp;)pDstLine)+=Dst.byte_width;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp; asm emms<br>
			}</span></span></div>
	</div>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//速度测试:<br>
	//==============================================================================<br>
	// PicZoom_ThreeOrder_MMX&nbsp;&nbsp;&nbsp;34.3 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">&nbsp;</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	&nbsp;N：将测试结果放到一起：</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: AMD64x2 4200+(2.37G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// 
StretchBlt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;232.7&nbsp;fps&nbsp;&nbsp;
 <br>
	// 
PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 711.7&nbsp;fps&nbsp;&nbsp;<br>
	// PicZoom_BilInear_MMX_Ex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;157.0 fps<br>
	// <br>
	// PicZoom_ThreeOrder0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.6 fps<br>
	// PicZoom_ThreeOrder_Common&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16.9 fps<br>
	//&nbsp;PicZoom_ThreeOrder_MMX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;34.3 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	补充Intel Core2 4400上的测试成绩:</span></p>
	<p><span style="font-size: small; font-family: 'courier new',courier">
	////////////////////////////////////////////////////////////////////////////////<br>
	//CPU: Intel Core2 4400(2.00G)&nbsp; zoom 800*600 to 1024*768<br>
	//==============================================================================<br>
	// 
PicZoom3_SSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1099.7&nbsp;fps&nbsp;&nbsp;<br>
	// PicZoom_BilInear_MMX_Ex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;142.9 fps<br>
	// <br>
	// PicZoom_ThreeOrder0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;4.2 fps<br>
	// PicZoom_ThreeOrder_Common&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17.6 fps<br>
	//&nbsp;PicZoom_ThreeOrder_MMX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;34.4 fps<br>
	////////////////////////////////////////////////////////////////////////////////</span></p>
	<p><font face="Courier New">摘要:首先给出一个基本的图像缩放算法，然后一步一步的优化其速度和缩放质量；</font></p>
	<p><font face="Courier New">高质量的快速的图像缩放 全文 分为:<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 上篇 近邻取样插值和其速度优化<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 中篇 二次线性插值和三次卷积插值<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 下篇 三次线性插值和MipMap链</font></p>
	<p><font face="Courier New">正文：</font></p>
	<p><font face="Courier New">A:对于前一篇文章中的二次线性插值、三次卷积插值算法，但它们处理缩小到0.5倍以下的<br>
	时候效果就会越来越差；这是因为插值的时候自考虑了附近点的原因；如下图：</font></p>
	<p><font face="Courier New">&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/yu.JPG">&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom1yu0_002.JPG">&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom1yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom1yu0.JPG">&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原
图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;近邻取样 
缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.1倍</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom2yu0_002.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 二次线性插值 
缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.1倍</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/zoom3yu0_002.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 三次卷积插值 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.1倍</font></p>
	<p><br>
	<font face="Courier New">&nbsp;&nbsp;&nbsp; 可以看出：当缩小的比例很大的时候，插值算法的效果和近邻取样的效果差不多了:( ;<br>
	一种可行的解决方案就是:缩小时考虑更多的点； 但这种解决方案有很多缺点：函数编写麻烦，<br>
	速度也许会很慢，优化也不容易做；&nbsp; 还有一个方案就是预先建立一个缩放好的大小不同的图片<br>
	列表，每一张图片都是前一张的0.5倍(这种图片列表就是MipMap链)，缩放的时候根据需要缩放<br>
	的比例从表中选择一张大小接近的图片来作为缩放的源图片； 该方案的优点：不需要编写新的<br>
	底层缩放算法，直接使用前面优化好的插值算法； 缺点：需要预先建立MipMap链，它需要时间，<br>
	并且它的储存需要多占用原图片的1/3空间(0.5^2+0.5^4+0.5^6+...=1/3)；还有一个不太明显<br>
	的小问题，就是在一张图片的连续的比例不同的缩放中，选择会从MipMap的一张源图片跳到另<br>
	一张图片，视觉效果上可能会有一个小的跳跃(我在《魔兽世界》里经常看到这种效应:)；一种<br>
	改进方案就是选择MipMap图片的时候，选择出附近的两张图片作为缩放的源图片；对两张图片<br>
	单独进行插值(和原来一致)输出两个值，然后把这两个值线性插值为最终结果；还有一个比较<br>
	大的缺点就是当缩放比例不均匀时(比如x轴放大y轴缩小)，缩放效果也不好；<br>
	(当前很多显卡都提供了MipMap纹理和对应的插值方案，OpenGL和DirectX都提供了操作接口)</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
	（"三次线性插值和MipMap链"其实比较简单，这里只给出关键代码或算法）<br>
　</font></p>
	<p><font face="Courier New">B: MipMap图片的生成:<br>
	&nbsp;&nbsp;&nbsp;&nbsp; 原图片缩放到0.5倍(宽和高都为原图片的1/2),在把0.5倍的图片缩放到0.25倍,....<br>
	&nbsp;&nbsp; 直到宽和高都为1个像素，如果有一个长度先到1就保持1； 缩放过程中，可以可采用前面的缩放插值算法；<br>
	&nbsp;&nbsp; 如果为了速度可以考虑这样的方案，要求原图片的宽和高必须是2的整数次方的数值，缩放时就可以直接将<br>
	&nbsp;&nbsp; 2x2的像素快速合并为一个像素(如果允许原图片宽和高为任何值，可以考虑在合并时引入Alpha通道)；</font></p>
	<p><font face="Courier New">C: MipMap链图片的储存方案:</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/yuMipMapTruePic.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 
&nbsp;MipMap链图片示意图&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/yuMipMapPic.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能的一种物理储存方案(我对每张图片
加了一个边
框)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </font></p>
	<p><font face="Courier New">D: 定义MipMap数据结构:<br>
	&nbsp;&nbsp; MipMap数据结构可以定义为一个TPicRegion数组和该数组的大小； <br>
	&nbsp;&nbsp; (MipMap图片的储存参见上面的图示)<br>
	&nbsp; 比如:<br>
　</font></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<font face="Courier New"><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#include&nbsp;&lt;vector&gt;</span></font><span style="color: rgb(0, 0, 0);"><br>
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;std::vector</font></span><font face="Courier New"><span style="color: rgb(0, 0, 0);">&lt;TPicRegion&gt;&nbsp;TMipMap;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 128, 0);">//其中，第一个元素TMipMap[0]指向原始图片，后面的依次为缩小图片；&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font></div>
	</div>
	<p><font face="Courier New">&nbsp;<br>
	E: MipMap的选择函数和偏好:<br>
	&nbsp;&nbsp;&nbsp; 在进行缩放时，根据目标图片缓冲区的大小来动态的选者MipMap中的一幅图片来作为源图片；这就需要一个<br>
	选择函数；比如:</font></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<font face="Courier New"><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;SelectBestPicIndex(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TMipMap&amp;&nbsp;mip,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstWidth,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstHeight)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;oldS=mip[0].width*mip[0].height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstS=dstWidth*dstHeight;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;(dstS&gt;=oldS)&nbsp;||&nbsp;(mip.size()==1)&nbsp;)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(dstS&lt;=1)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;mip.size()-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span></font><span style="color: rgb(0, 0, 0);"><br>
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></span><font face="Courier New"><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(log(oldS/dstS)*0.5+0.5</span></font><span style="color: rgb(0, 0, 0);"><font face="Courier New">);<br>
			}</font></span></div>
	</div>
	<p><font face="Courier New">选择函数可以增加一个偏好参数：<br>
	mip选择偏好：0.5没有偏好，靠近0偏向选择小图片，靠近1偏向选择大图片(质量好一些)</font></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<font face="Courier New"><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;public_mip_bias=0.5;&nbsp;</span><span style="color: rgb(0, 128, 0);">//[0..1]&nbsp;</span></font><span style="color: rgb(0, 128, 0);"><br>
			</span><span style="color: rgb(0, 0, 0);"><br>
			</span><font face="Courier New">
			<span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;SelectBestPicIndex(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TMipMap&amp;&nbsp;mip,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstWidth,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstHeight)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;oldS=mip[0].width*mip[0].height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstS=dstWidth*dstHeight;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;(dstS&gt;=oldS)&nbsp;||&nbsp;(mip.size()==1)&nbsp;)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(dstS&lt;=1)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;mip.size()-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span></font><span style="color: rgb(0, 0, 0);"><br>
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></span><font face="Courier New"><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)(log(oldS/dstS)*0.5+</span></font><span style="color: rgb(0, 0, 0);"><font face="Courier New">public_mip_bias);<br>
			}</font></span></div>
	</div>
	<p><font face="Courier New">&nbsp;F:利用MipMap后的缩放效果:</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom1yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom1yu0_002.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom1yu0_003.JPG">&nbsp;&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 MipMap+近邻取样 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; (利用MipMap做一次近邻取样)</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom2yu0_002.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom2yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom2yu0.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 MipMap+二次线性插值 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (利用MipMap做一次二次线性插值)</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom3yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom3yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMapzoom3yu0_002.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 MipMap+三次卷积插值 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (利用MipMap做一次三次卷积插值)</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><br>
	<font face="Courier New">G: 在MipMap的两张图片之间插值:<br>
	&nbsp; 选择MipMap的时候，同时可以选择相邻的两张MipMap图片；分别进行插值算法后得到两个颜色结果；<br>
	对两个MipMap图片产生的评价值可以作为这两个颜色的插值权重，得到最终的颜色插值结果；优点是<br>
	缩放效果好，避免跳跃;缺点是速度慢:)&nbsp;&nbsp; </font></p>
	<p><font face="Courier New">选择和权重函数的一个可能实现：</font></p>
	<div style="width: 95%; border: 0.5pt solid windowtext; padding-left: 5.4pt; padding-right: 5.4pt; padding-top: 4px; padding-bottom: 4px; background: rgb(230, 230, 230)">
		<div>
			<span style="color: rgb(0, 0, 255);"><font face="Courier New">struct</font></span><font face="Courier New"><span style="color: rgb(0, 0, 0);">&nbsp;TMipWeight&nbsp;{<br>
			&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;BigMip;<br>
			&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;&nbsp;SmallMip;<br>
			&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;BigMipWeight;</span><span style="color: rgb(0, 128, 0);">//[0..1]</span></font><span style="color: rgb(0, 128, 0);"><br>
			</span><font face="Courier New"><span style="color: rgb(0, 0, 0);">
			};<br>
			<br>
			TMipWeight&nbsp;SelectBestPicIndexEx(</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;TMipMap&amp;&nbsp;mip,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstWidth,</span><span style="color: rgb(0, 0, 255);">const</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstHeight)<br>
			{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;oldS=mip[0].width*mip[0].height;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">&nbsp;dstS=dstWidth*dstHeight;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;TMipWeight&nbsp;result;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(&nbsp;(dstS&gt;=oldS)&nbsp;||&nbsp;(mip.size()==1)&nbsp;)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMip=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.SmallMip=0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMipWeight=1.0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(dstS&lt;=1)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMip=mip.size()-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.SmallMip=mip.size()-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMipWeight=1.0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span></font><span style="color: rgb(0, 0, 0);"><br>
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></span><font face="Courier New"><span style="color: rgb(0, 0, 255);">float</span><span style="color: rgb(0, 0, 0);">&nbsp;bestIndex=log(oldS/dstS)*0.5+0.5;&nbsp;</span><span style="color: rgb(0, 128, 0);">//or&nbsp;+&nbsp;public_mip_bias</span></font><span style="color: rgb(0, 128, 0);"><br>
			</span><font face="Courier New"><span style="color: rgb(0, 0, 0);">
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMip=(</span><span style="color: rgb(0, 0, 255);">long</span><span style="color: rgb(0, 0, 0);">)bestIndex;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(bestIndex==mip.size()-1)<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.SmallMip=mip.size()-1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMipWeight=1.0;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span></font><span style="color: rgb(0, 0, 0);"><br>
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.SmallMip</font></span><font face="Courier New"><span style="color: rgb(0, 0, 0);">=result.BigMip+1;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.BigMipWeight=1.0-(bestIndex-result.BigMip);<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;}<br>
			&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span></font><span style="color: rgb(0, 0, 0);"><font face="Courier New">&nbsp;result;<br>
			}</font></span></div>
	</div>
	<p>　</p>
	<p><font face="Courier New">H:MipMap间插值效果:</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom1yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom1yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom1yu0_002.JPG"><br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 MipMap+两次近邻取样 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 
缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (利用MipMap做两次近邻取样输出两个值，然后线性插值为最终结果)</font></p>
	<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom2yu0.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom2yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom2yu0_002.JPG"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000ff">三次线性插值</font> 缩放到0.4倍&nbsp;&nbsp;&nbsp;&nbsp; 
	缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(三次线性插值:利用MipMap做两次二次线性插值输出两个值，然后线性插值为最终结果)&nbsp;&nbsp;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom3yu0_003.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom3yu0_002.JPG">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	&nbsp;<img alt="" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/MipMap2zoom3yu0.JPG"><br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
MipMap+两次三次卷积插值 缩放到0.4倍&nbsp;&nbsp;&nbsp; 
缩放到0.2倍&nbsp;&nbsp;&nbsp;&nbsp; 缩放到0.1倍<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (利用MipMap做两次三次卷积插值输出两个值，然后线性插值为最终结果)<br>
　</font></p>
	<p>　</p>
	<p><font face="Courier New">
	(图像缩放系列终于写完了，计划中写图像任意角度的高质量的快速旋转、Alpha图片混合等，尽请期待:)</font></p>
	<p><font face="Courier New">&nbsp;(ps: 思考中的一个图片压缩方法：利用MipMap来压缩图像数据;输入一张图片，然后生成MipMap链，保存相邻之间图片的差(数值差可能很小，很容易找好的算法压缩得很小)和最顶的一张图片(一个点)；&nbsp; 
	解压的时候依次求和就得到原图片了；&nbsp; 该算法为无损压缩，适合于人物风景等过渡比较多的图片的压缩，不太适合线条类等相邻间颜色变化剧烈的图片；)</font></p><p></p></div>
</div>
<div class="cont5">
<div class="t">博客推荐文章</div>
<ul>
<li><a href="http://blog.chinaunix.net/uid-26063552-id-3428137.html">S201212030001 每日例会纪要</a>  (4小时前)</li>
<li><a href="http://blog.chinaunix.net/uid-26680833-id-3428113.html">OHCI,EHCI,UHCI</a>  (12小时前)</li>
<li><a href="http://blog.chinaunix.net/uid-28320320-id-3428045.html">u-boot-2012.10 porting on OK6410</a>  (16小时前)</li>
<li><a href="http://blog.chinaunix.net/uid-25885064-id-3428012.html">android开发者最爱的50个免费代码</a>  (17小时前)</li>
<li><a href="http://blog.chinaunix.net/uid-11121450-id-3428014.html">《20天搞定iPhone软件开发》-可画葫芦,不可搞定</a>  (17小时前)</li>
	
</ul>
</div>

<div class="cont6">
<!-- 分享 -->
<div class="fx">
<div class="icon">										 
<!-- JiaThis Button BEGIN -->
<div id="ckepop">
<a href="http://www.jiathis.com/share/" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank">分享到：</a>
<a title="分享到新浪微博" class="jiathis_button_tsina"><span class="jiathis_txt jiathis_separator jtico jtico_tsina">新浪微博</span></a>
<a title="分享到QQ空间" class="jiathis_button_qzone"><span class="jiathis_txt jiathis_separator jtico jtico_qzone">QQ空间</span></a>
<a title="分享到开心网" class="jiathis_button_kaixin001"><span class="jiathis_txt jiathis_separator jtico jtico_kaixin001">开心网</span></a>
<a title="分享到豆瓣" class="jiathis_button_douban"><span class="jiathis_txt jiathis_separator jtico jtico_douban">豆瓣</span></a>
<a title="分享到人人网" class="jiathis_button_renren"><span class="jiathis_txt jiathis_separator jtico jtico_renren">人人网</span></a>
<a title="分享到Twitter" class="jiathis_button_twitter"><span class="jiathis_txt jiathis_separator jtico jtico_twitter">twitter</span></a>
<a title="分享到Facebook" class="jiathis_button_fb"><span class="jiathis_txt jiathis_separator jtico jtico_fb">fb</span></a>
</div>
<script type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/jia.js" charset="utf-8"></script><script type="text/javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/plugin.js" charset="utf-8"></script><div style="position:absolute;width:0px;height:0px;"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="JIATHISSWF" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" height="0" width="0"><param name="allowScriptAccess" value="always"><param name="swLiveConnect" value="true"><param name="movie" value="http://www.jiathis.com/code/swf/m.swf"><param name="FlashVars" value="z=a"><embed name="JIATHISSWF" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/m.swf" flashvars="z=a" allowscriptaccess="always" swliveconnect="true" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" height="0" width="0"></object></div>
<!-- JiaThis Button END -->
</div>

<span style="cursor:pointer;">
<a id="support">1</a>
<br>
<a onclick="ajaxmenu(event, this.id,0, 2000, 'doSupport')" id="click_blogid_2185545" href="http://blog.chinaunix.net/cp.php?ac=click&amp;op=add&amp;clickid=4&amp;idtype=blogid&amp;id=2185545&amp;hash=6405c4d0649112353b9111d5bcfeb102">
&nbsp;&nbsp;&nbsp;<b>顶</b>
</a>
</span>
<div class="clear"></div>
</div>

<div class="clear"></div>
<style>
.bor0223{ width:708px; margin:0 auto 20px; height:90px;}
.bor0223_tit{ height:28px; line-height:28px; border-bottom:1px dashed #ccc; font-size:14px; font-weight:bold; padding-left:12px;}
.list0223{ width:698px; margin:10px 0 0 12px;}
.list0223 li{ float:left; width:174px; line-height:20px; height:20px;}
</style>
<div class="bor0223"><div class="bor0223_tit">热门推荐</div>
<ul class="list0223">
<li><a href="http://product.it168.com/detail/doc/475704/index.shtml" target="_blank" title="IBM System x3650 M3(7945075)">IBM System x3650 M3(...</a></li><li><a href="http://product.it168.com/detail/doc/486952/index.shtml" target="_blank" title="IBM X3650 M4(7915I21)">IBM X3650 M4(7915I21...</a></li><li><a href="http://product.it168.com/detail/doc/455917/index.shtml" target="_blank" title="惠普 ProLiant DL388 G7(QP853A)">惠普 ProLiant DL388 G...</a></li><li><a href="http://product.it168.com/detail/doc/460086/index.shtml" target="_blank" title="戴尔 PowerEdge T410(Xeon E5606/2GB/146GB)">戴尔 PowerEdge T410(Xeo...</a></li><li><a href="http://blog.chinaunix.net/zhuanti/101153/pipehanshu_1011520735.shtml" target="_blank" title="pipe函数">pipe函数</a></li><li><a href="http://blog.chinaunix.net/zhuanti/101150/flexhoutaibangdingtupian_1011497880.shtml" target="_blank" title="flex 后台绑定图片">flex 后台绑定图片</a></li><li><a href="http://blog.chinaunix.net/zhuanti/101151/rhel4yumyuan_1011504165.shtml" target="_blank" title="rhel4 yum 源">rhel4 yum 源</a></li><li><a href="http://blog.chinaunix.net/zhuanti/101164/freebsdflash_1011637506.shtml" target="_blank" title="freebsd flash">freebsd flash</a></li></ul>
</div>

<!-- 阅读 -->

<div class="read">
<a href="javascript:;">阅读<b>(1069)</b></a>┊ <a href="http://blog.chinaunix.net/space.php?uid=22915173&amp;do=blog&amp;id=2185545#comment">评论 <b>(<span id="comm_num">1</span>)</b></a>┊<a href="http://blog.chinaunix.net/cp.php?ac=favorites&amp;op=addfavorites&amp;blogid=2185545" id="a_favorite" onclick="ajaxmenu(event, this.id, 1)">收藏(0)</a>┊<a href="http://blog.chinaunix.net/cp.php?ac=common&amp;op=report&amp;idtype=blogid&amp;id=2185545" id="a_report" onclick="ajaxmenu(event, this.id, 1)">举报</a>┊<a href="javascript:window.print();">打印</a>
</div>

<div class="next1">前一篇：<a href="http://blog.chinaunix.net/uid-22915173-id-2155123.html">bmp缩放代码</a></div>

<!-- 评论 -->
<div class="tit8" id="comment_dv">
<span><a href="#comment">[发评论]</a></span>
<b>评论</b>&nbsp;重要提示：警惕虚假中奖信息!
</div>
<div id="comment" class="comments_list">
<div class="box_content">
<ul class="post_list a_list justify_list" id="comment_ul">
<a name="572276"></a>
<li id="comment_572276_li" class="space cont7 "><div class="avatar48"><a href="http://blog.chinaunix.net/uid/8496844.html"><img src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/44_avatar_small.jpg" onerror="this.onerror=null;this.src='http://passport.ixpub.net/images/noavatar_small.gif'"></a></div>
<div class="title">
<a href="http://blog.chinaunix.net/uid/8496844.html" id="author_572276">lxl123</a> 
<span class="gray">2012-06-16 16:43</span>

</div>

<div class="detail" id="comment_572276">大牛了,大侠适合去做系统优化</div>

</li></ul>
</div>
</div>
<div class="clear"></div>

<!-- 发评论 -->
<div class="logins">亲，您还没有登录,请<a href="http://blog.chinaunix.net/do.php?ac=wuxingzypcw213">[登录]</a>或<a href="http://blog.chinaunix.net/do.php?ac=8f442ba1e0c79cd3efcd1fd42b8aad8e">[注册]</a>后再进行评论</div>
</div>
</div>
 <!-- 徽章定位1 -->
 </div>

<div class="clear"></div>
</div>
<script type="text/javascript">
<!--
var blogid = 2185545;
var bloguid = 0;
function doSupport(){
var x = new Ajax();
x.get('do.php?ac=ajax&op=support&id='+blogid , function(s){
document.getElementById('support').innerHTML = s;
});
}

function code_hide(id){
var code = document.getElementById(id).style.display;
if(code == 'none'){
document.getElementById(id).style.display = 'block';
}else{
document.getElementById(id).style.display = 'none';
}
}


function checkComment(id){

//	if(bloguid < 1 &&  ($('nim').checked == false) ){
//		alert('请选择匿名发表评论！');
//		return false;
//	}
if(trim($('seccode').value) == ''){
alert('验证码不能为空！');
return false;
}
s('comment_dv');
ajaxpost('quickcommentform_'+id, 'comment_add');
$('seccode').value = '';

var img = '/do.php?ac=seccode&rand='+Math.random();
$('img_seccode').src = img;
}
$('font_14').style.fontWeight='bold';
function doZoom(s){
$('font_12').style.fontWeight='normal';
$('font_14').style.fontWeight='normal';
$('font_16').style.fontWeight='normal';
$('font_'+s).style.fontWeight='bold';
s = s + 'px';
$('detail').style.fontSize = s;
}
function setTop(t , id)
{
var x = new Ajax();
x.get('/admin.php?ac=blog&op='+ t +'&id='+id , function(s){
if(t == 'retop'){
document.getElementById('top_' + id).innerHTML = "<a href=\"javascript:;\" onclick=\"setTop('top', '"+id+"');\">&nbsp;置顶首页</a>";
}else{
document.getElementById('top_' + id).innerHTML = "<a href=\"javascript:;\" onclick=\"setTop('retop', '"+id+"');\">&nbsp;取消置顶</a>";
}
});
}

var FmId = 2;

function attention(uid , t){
if(uid){
var x = new Ajax();
x.get('/cp.php?ac=attention&op='+ t +'&uid=' + uid , function(s){
if(t == 'add'){

var h = "<a href='javascript:;' onclick='attention(\""+ uid +"\" , \"delete\");'>取消关注</a>";
document.getElementById('attention').innerHTML = h;
}else{
var h = "<a href='javascript:;' onclick='attention(\""+ uid +"\" , \"add\");'>加关注</a>";
document.getElementById('attention').innerHTML = h;
}
});
}
}
//-->
</script>
<div id="footer">
<div class="l">
<a href="http://www.chinaunix.net/about/index.shtml" rel="nofollow">关于我们</a> | 
<a href="http://www.it168.com/bottomfile/it168.shtml" rel="nofollow">关于IT168</a> | 
<a href="http://www.chinaunix.net/about/connect.html" rel="nofollow">联系方式</a> | 
<a href="http://www.chinaunix.net/about/service.html" rel="nofollow">广告合作</a> | 
<a href="http://blog.chinaunix.net/about/fl.html" rel="nofollow">法律声明</a> | 
<a href="http://blog.chinaunix.net/register.php" rel="nofollow">免费注册</a> 
<address>
Copyright &#169; 2001-2010 ChinaUnix.net All Rights Reserved 北京皓辰网域网络信息技术有限公司. 版权所有 
</address>
</div>
<div class="r">
感谢所有关心和支持过ChinaUnix的朋友们<br>京ICP证041476号 京ICP证060528号
</div>
<div class="clear"></div>
</div>
<div id="dialogBoxShadow" style="display:none;z-index:49;"></div>
<input id="dot" value="" type="hidden">
<script type="text/javascript">

<!--
if($('dot').value == 'theme')  getPageSet();
function checkHtitle(){
var tt = $('spacetitle').value;
if(ttlen(trim(tt)) > 48){
alert('博客宣言不能超过48个字符！');
return false;
}
ajaxpost('home_from','homeTitle');
}
function checkBbrief(){
var tt = $('blog_brief').value;
if(ttlen(trim(tt)) > 200){
alert('个性签名不能超过200个字符！');
return false;
}
ajaxpost('brief_form','blogBrief');
}
function homeTitle()
{
var spacetitle_value = $('spacetitle').value;
if(!spacetitle_value){
spacetitle_value = '还没有博客宣言';
}
var x = new Ajax();
x.get('/do.php?ac=ajax&op=htl', function(s){
document.getElementById('home_t').innerHTML = s
});
s('home_title');
h('home_title_form');
}
function blogBrief()
{
var spacetitle_value = $('blog_brief').value;
if(!spacetitle_value){
spacetitle_value = '还没有个性签名';
}
var x = new Ajax();
x.get('/do.php?ac=ajax&op=bbf', function(s){
document.getElementById('blog_b').innerHTML = s
});
s('blog_brief');
h('blog_brief_form');
}
//-->
</script>
<script language="javascript" src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/pv.js"></script>
<script type="text/javascript">
    function sendPV(){
        var pvTrack = new PvTrack();
        pvTrack.type = 35; // 频道类别ID
        pvTrack.channel = 189; // 频道ID
        pvTrack.pageType = 0;
        pvTrack.track();
    }
    window.setTimeout("sendPV()", 0); 

</script>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20237423-2']);
  _gaq.push(['_setDomainName', '.chinaunix.net']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div style="display:none">
<script type="text/javascript"> 
var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3F0ee5e8cdc4d43389b3d1bfd76e83216b' type='text/javascript'%3E%3C/script%3E"));
</script><script src="%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE%E7%AE%97%E6%B3%95_files/h.js" type="text/javascript"></script>
</div>

 

</body></html>